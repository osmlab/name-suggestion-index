<!DOCTYPE html>
<html lang="en-gb">
  <head>
    <title>Warnings generated when running the Wikidata script</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <style>
      body {
        background-color: #f6f6f6;
        color: #333;
        font-family: "-apple-system", BlinkMacSystemFont,
              "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell",
              "Fira Sans", "Droid Sans", "Helvetica Neue", "Arial",
              sans-serif;
      }
      code {
        background-color: #d5edf7;
        font-weight: bold;
      }
      table {
        border: 1px solid black;
      }
      table thead tr th {
        margin:  0;
        padding: 2px;
        border-bottom: 1px dashed black;
        background-color: #dae7f0;
      }
      table tbody tr td {
        margin: 10px 0;
        padding: 10px 5px;
        border-bottom: 1px dashed black;
      }
      table tbody tr td:first-child {
        width: 10%;
        text-align: center;
        vertical-align: text-top;
      }
      table tbody tr:nth-child(odd) {
        background-color: #f0e9e1;
      }
    </style>

    <script>
      async function nsiWikiWarnings() {
        //let warningsFile = "https://raw.githubusercontent.com/osmlab/name-suggestion-index/main/dist/warnings.json";
        let warningsFile = "https://raw.githubusercontent.com/osmlab/name-suggestion-index/main/dist/warnings.min.json";

        // Use 'fetch' to grab the raw 'warnings.json' or 'warnings.min.json' file from GitHub and place the JSON data in an object variable.
        const allWarningsFile = await fetch(warningsFile);
        const allWarningsData = await allWarningsFile.json();

        // We only want the warning data, not the meta data (except the generated timestamp).
        const allWarnings = allWarningsData['warnings'];
        let generated = new Date(Date.parse(allWarningsData._meta.generated));
            generated = generated.getDate() + "/" + (generated.getMonth() + 1) + "/" + generated.getFullYear();


        // Loop through each warning and add a <table> (<tr>) row for each warning.
        let tableRows = "";
        let rowClass;

        allWarnings.forEach(warning => {
          // Assign each row an error type (default 'other') for the 'class' attribute, allowing for possible filtering / styling later.
          rowClass = "other";

          // An "unresolved-redirect" won't be a string, it'll be an object, so check for that first, and set the 'warning.msg.name' as the 'warning.msg'.
          warning.msg = warning.msg.name ? warning.msg.name : warning.msg;

          // If the warning is a standard Facebook warning, and includes the Facebook Developers link, make the link an active hyperlink.
          if (warning.msg.match("https://developers.facebook.com/docs/graph-api")) {
            warning.msg = warning.msg.replace("https://developers.facebook.com/docs/graph-api",
                                   "<a href=\"https://developers.facebook.com/docs/graph-api\">https://developers.facebook.com/docs/graph-api</a>");
            rowClass = "facebookerror";
          }

          // The Wikidata entry marks a public Facebook page as having restricted access.
          if (warning.msg.match("restricted access qualifier")) {
            rowClass = "facebookaccess";
          }

          // If the warning is about a replacement Wikidata entry, make the suggested replacement a hyperlink.
          if (warning.msg.match("might possibly be replaced by")) {
            warning.msg = convertQIDToHyperLink(warning.msg);
            rowClass = "replacewiki";
          }

          // The Wikidata entry doesn't have an English label.
          if (warning.msg.match("missing an English label")) {
            rowClass = "englishlabel";
          }

          // The Wikidata entry was deleted.
          if (warning.msg.match("was deleted")) {
            rowClass = "deleted";
          }

          // The Wikidata entry has an unresolved redirect. Grab the Wikidata QID of the redirect target, and make it a hyperlink.
          if (warning.msg.match("Wikidata QID redirects to")) {
            warning.msg = convertQIDToHyperLink(warning.msg);
            rowClass = "unresolved";
          }

          tableRows += "<tr class=\"" + rowClass + "\">";
          tableRows += "<td>" + wikidataLink(warning.qid) + "</td>";
          tableRows += "<td>" + warning.msg + "</td>";
          tableRows += "</tr>";
        });

        const wikiTable1 = document.getElementById("wikidataWarningsTable");
        const wikiTableBody = wikiTable1.getElementsByTagName("tbody");
        const wikiTableCaption = wikiTable1.getElementsByTagName("caption");

        wikiTableBody[0].innerHTML = tableRows;
        wikiTableCaption[0].innerHTML = "Table of " + allWarnings.length + " Wikidata errors (generated " + generated + ")!";
      }

      // Grabs a Wikidata QID, including the letter Q, and creates a link to it.
      function convertQIDToHyperLink(msg)
      {
        const thisMatch = msg.match(/Q[0-9]+/);
        return msg.replace(thisMatch,wikidataLink(thisMatch));
      }

      function wikidataLink(qid)
      {
        return "<a href=\"https://www.wikidata.org/wiki/" + qid + "\">" + qid + "</a>";
      }

      // Run the function nsiWikiWarnings() when the DOM has loaded.
      window.addEventListener("load", nsiWikiWarnings());
    </script>
  </head>
  <body>
    <p><a href="https://nsi.guide">nsi.guide</a></p>

    <h1>Wikidata Warnings</h1>

    <p>The table below shows all the warnings generated when "<code>npm run wikidata</code>" is run.</p>

    <p>
    When the command "<code>npm run wikidata</code>" is run by a maintainer of the project,
    this will connect to Wikidata directly and attempt to download logos and descriptions for each
    entry within the Name Suggestion Index (<abbr title="Name Suggestion Index">NSI</abbr>).
    Sometimes, Wikidata won't be able to provide the data the <abbr title="Name Suggestion Index">NSI</abbr> is
    looking for, and will return an error message. These error messages are displayed below. Common errors are
    social media accounts listed in a Wikidata entry which are out of date, or simply incorrect.
    </p>

    <p>
    Guidance for resolving warnings:
    </p>

    <ul>
      <li>
        <strong>Deleted Wikidata entries:</strong> If a Wikidata entry has been deleted, it might be possible
        to request that it is reinstated by the Wikidata administrator who deleted it. Clicking the Wikidata
        link of the deleted entry will bring up the deletion log for the entry, including the username of the
        administrator who performed the deletion. For additional guidance on how to request the undeletion
        of an entry, please view the
        "<a href="https://github.com/osmlab/name-suggestion-index/wiki/Editing-Wikidata#undeletion-of-wikidata-pages">Editing Wikidata</a>"
        wiki page on the <abbr title="Name Suggestion Index">NSI</abbr> GitHub.
      </li>
      <li>
        <strong>Facebook account access ("Unsupported get request"):</strong>
        <ul>
          <li>
            Some branded Facebook accounts are set with access restrictions, such as requiring
            the user to be logged in when browsing. Calls to the Facebook Graph API will return
            a generic error when attempting to read these accounts, which is something the
            <abbr title="Name Suggestion Index">NSI</abbr> can't skirt around at the moment.
            If the exact access restriction is identified, it can be added to the
            "<a href="https://www.wikidata.org/wiki/Property:P2013">Facebook username</a>"
            statement on the Wikidata entry using the qualifier
            "<a href="https://www.wikidata.org/wiki/Property:P6954">online access status</a>".
            "<code>npm run wikidata</code>" will ignore the Facebook API warning for any accounts
            with "online access status" set to "<a href="https://www.wikidata.org/wiki/Q58370623">private account</a>",
            "<a href="https://www.wikidata.org/wiki/Q107459441">registration required</a>" (i.e., only visible when logged in), or
            "<a href="https://www.wikidata.org/wiki/Q113165094">location restricted to country of publication</a>"
            (i.e., the profile is only visible to users from certain countries, or is blocked
            to users from certain countries). "<code>npm run wikidata</code>" will also warn of
            any Facebook accounts that have a restricted access qualifier on Wikidata, but have
            since had their privacy settings changed to make the account publicly viewable.
          </li>
          <li>
            Other branded Facebook accounts may be incorrectly configured as a personal profile.
            These accounts will have an "Add friend" button instead of "Like" or "Follow"
            when visited. Calls to the Facebook Graph API will return a generic error when
            attempting to read these accounts, regardless of access status, which is also something
            the <abbr title="Name Suggestion Index">NSI</abbr> can't skirt around at the moment.
            Unlike properly configured branded Facebook pages with access restrictions, Wikidata
            does not have a way to label incorrectly configured accounts; thus,
            "<code>npm run wikidata</code>" cannot detect whether an account has "personal"
            characteristics or suppress the resulting Graph API warning from these accounts.
            As such, the warning table below may contain false positives where Wikidata is
            pointing to a valid, existing, and publicly viewable account.
          </li>
        </ul>
      </li>
      <li>
        <strong>Unresolved redirects:</strong> An "unresolved redirect" is when the Wikidata entry
        the <abbr title="Name Suggestion Index">NSI</abbr> links to is redirecting to a different (possibly newer)
        Wikidata entry. In this instance, the Wikidata reference will need to be updated within
        the <abbr title="Name Suggestion Index">NSI</abbr> data itself.
      </li>
    </ul>

    <p>
    If you can, simply click on a Wikidata link below, and check to see if the error can be fixed. Please note that
    fixing an error will not remove the error message below until "<code>npm run wikidata</code>" has been run again,
    and "<code>npm run dist</code>" has been run to have <a href="https://nsi.guide">nsi.guide</a> pull the latest
    data from the <abbr title="Name Suggestion Index">NSI</abbr> project.
    </p>

    <table id="wikidataWarningsTable">
      <caption>Table of Wikidata errors!</caption>
      <thead>
        <tr>
          <th>Wikidata</th>
          <th>Error Message</th>
        </tr>
       </thead>
       <tbody>
         <tr>
           <td colspan=2>Warnings will be listed here, unless an error occurs, or if JavaScript is turned off!</td>
         </tr>
       </tbody>
     </table>
  </body>
</html>